generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  avatarUrl            String?
  password             Password?
  isConfirmed          Boolean               @default(false)
  payment              UserPayment?
  paymentHistory       UserPaymentHistory[]
  workspace            Workspace[]
  collaborator         Collaborator[]
  media                Media[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  comments             Comments[]
  notificationSettings NotificationSettings?
  notes                Notes[]
}

model Notes {
  id        String   @id @default(cuid())
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  note      String   @db.Text
  preview   String   @db.Text
  public    Boolean  @default(false)
  favorite  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model Workspace {
  id           String         @id @default(cuid())
  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  name         String
  sortIndex    String
  collaborator Collaborator[]
  media        Media[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([ownerId])
}

model Collaborator {
  id          String  @id @default(uuid())
  isConfirmed Boolean @default(false)
  role        Role    @default(OWNER)
  rights      Json

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workspaceId])
  @@index([userId])
}

enum Role {
  OWNER
  COLLABORATOR
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  @@index([userId])
}

model UserPayment {
  id                  String   @id @default(uuid())
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String   @unique
  subscriptionId      String   @unique
  subscriptionPlanId  String
  subscriptionEndDate String
  subscriptionStatus  String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId])
}

model UserPaymentHistory {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  alert_name  String
  historyData Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Feedback {
  id        String   @id @default(uuid())
  userEmail String
  userId    String
  feedback  String   @db.Text
  type      String   @default("bug")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String?
  fileUrl     String     @db.Text
  name        String
  type        String
  size        Int
  comments    Comments[]
  public      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([workspaceId])
}

model Comments {
  id        String   @id @default(uuid())
  comment   String   @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([mediaId])
}

model NotificationSettings {
  id                       String   @id @default(uuid())
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String   @unique
  outOfSpace               Boolean  @default(false)
  deleteLargeNumberOfFiles Boolean  @default(false)
  newCollaborator          Boolean  @default(false)
  newFeaturesAndUpdates    Boolean  @default(false)
  tips                     Boolean  @default(false)
  sharedActivity           Boolean  @default(false)
  comments                 Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}
